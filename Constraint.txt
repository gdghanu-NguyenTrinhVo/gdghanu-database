***Constraint***
- Constraint(ràng buộc) là các quy tắc được áp dụng trên các cột dữ liệu, trên bảng
- Được sử dụng để kiểm tra tính hợp lệ của dữ liệu vào, đảm bảo tính chính xác, tính toàn vẹn của dữ liệu.
- Có thể chỉ định ràng buộc khi bảng được tạo bằng câu lệnh CREATE TABLE hoặc sau khi bảng được tạo bằng câu lệnh ALTER TABLE.
- Cú pháp:
    CREATE TABLE table_name (
    column1 datatype constraint,
    column2 datatype constraint,
    column3 datatype constraint,
    ....
    );

- Một số ràng buộc phổ biến:
+) NOT NULL - Đảm bảo rằng một cột không thể có giá trị NULL
+) UNIQUE - Đảm bảo rằng tất cả các giá trị trong một cột đều khác nhau
+) PRIMARY KEY - Dùng để thiết lập khóa chính trên bảng, xác định giá trị trên tập các cột làm khóa chính phải là duy nhất, không được trùng lặp. Việc khai báo ràng buộc khóa chính yêu cầu các cột phải NOT NULL.
+) FOREIGN KEY - Dùng để thiết lập khóa ngoại trên bảng, tham chiếu đến bảng khác thông qua giá trị của cột được liên kết. Giá trị của cột được liên kết phải là duy nhất trong bảng kia.
+) CHECK - Đảm bảo rằng các giá trị trong một cột thỏa mãn một điều kiện cụ thể
+) DEFAULT - Đặt giá trị mặc định cho một cột nếu không có giá trị nào được chỉ định
+) CREATE INDEX - Được sử dụng để tạo và truy xuất dữ liệu từ cơ sở dữ liệu rất nhanh 

***NOT NULL Constraint***
- Theo mặc định, một cột có thể chứa các giá trị NULL.

- Ràng buộc NOT NULL buộc một cột KHÔNG chấp nhận các giá trị NULL.

- Ràng buộc này buộc một trường luôn chứa một giá trị, nghĩa là bạn không thể chèn một bản ghi mới hoặc cập nhật một bản ghi mà không thêm giá trị vào trường này.

VD:
+) Khi taọ bảng với CREATE TABLE:
   CREATE TABLE Persons (
    ID int NOT NULL,
    );

+) Với ALTER TABLE trong SQL Server:
   ALTER TABLE Persons
   ALTER COLUMN Age int NOT NULL;

+) Với ALTER TABLE trong mySQL:
   ALTER TABLE Persons
   ALTER COLUMN Age int NOT NULL;

***UNIQUE Constraint***
- Ràng buộc UNIQUE đảm bảo rằng tất cả các giá trị trong một cột đều khác nhau.

- Cả ràng buộc UNIQUE và PRIMARY KEY đều đảm bảo tính duy nhất cho một cột hoặc một tập hợp các cột.

- Ràng buộc PRIMARY KEY tự động có ràng buộc UNIQUE.

- Tuy nhiên, có thể có nhiều ràng buộc UNIQUE cho mỗi bảng, nhưng chỉ có một ràng buộc PRIMARY KEY cho mỗi bảng.

VD:
- Khi tạo bảng bằng CREATE TABLE:
+) Trong SQL Server:
   CREATE TABLE Persons (
     ID int NOT NULL UNIQUE,
   );

+) Trong MySQL:
   CREATE TABLE Persons (
    ID int NOT NULL,
    UNIQUE (ID)
   );

+) Đặt tên cho ràng buộc UNIQUE để xác định ràng buộc UNIQUE trên nhiều cột:
   CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    CONSTRAINT UC_Person UNIQUE (ID,LastName)
   )  

- Khi tạo bảng với ALTER TABLE:
   ALTER TABLE Persons
   ADD UNIQUE (ID);

+) Với ràng buộc UNIQUE trên nhiều cột:
   ALTER TABLE Persons
   ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);

- Cách xóa ràng buộc UNIQUE:
+) Trong MySQL:
   ALTER TABLE Persons
   DROP INDEX UC_Person;

+) Trong SQL Server:
   ALTER TABLE Persons
   DROP CONSTRAINT UC_Person; 


***PRIMARY KEY Constraint****
- Ràng buộc PRIMARY KEY xác định duy nhất từng bản ghi trong một bảng.

- Khóa chính phải chứa các giá trị DUY NHẤT và không thể chứa các giá trị NULL.

- Một bảng chỉ có thể có MỘT khóa chính; và trong bảng, khóa chính này có thể bao gồm một hoặc nhiều cột (trường).

- PRIMARY KEY trong CREATE TABLE:

+) Trong MySQL:
   CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    PRIMARY KEY (ID)
   );

+) Trong SQL Server:
   CREATE TABLE Persons (
    ID int NOT NULL PRIMARY KEY,
    LastName varchar(255) NOT NULL,
   );

- Đặt tên cho ràng buộc KHÓA CHÍNH và để xác định ràng buộc KHÓA CHÍNH trên nhiều cột:
   CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
    );
- Xóa ràng buộc PRIMARY KEY:
+) Trong MySQL:
   ALTER TABLE Persons
   DROP PRIMARY KEY;

+) Trong SQL Server:
   ALTER TABLE Persons
   DROP CONSTRAINT PK_Person;

***FOREIGN KEY***
- Ràng buộc FOREIGN KEY được sử dụng để ngăn chặn các hành động có thể phá hủy các liên kết giữa các bảng.

- FOREIGN KEY là một trường (hoặc tập hợp các trường) trong một bảng, tham chiếu đến PRIMARY KEY trong một bảng khác.

- Bảng có khóa ngoại được gọi là bảng con và bảng có khóa chính được gọi là bảng được tham chiếu hoặc bảng cha.

- FOREIGN KEY trong CREATE TABLE:
+) mySQL:
    CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
    );

+) SQL Server:
    CREATE TABLE Orders (
    OrderID int NOT NULL PRIMARY KEY,
    OrderNumber int NOT NULL,
    PersonID int FOREIGN KEY REFERENCES Persons(PersonID)
    );

+) Đặt tên ràng buộc KHÓA NGOẠI và để xác định ràng buộc KHÓA NGOẠI trên nhiều cột:
    CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)
    REFERENCES Persons(PersonID)
    );

- Trong ALTER TABLE:
    ALTER TABLE Orders
    ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

+) KHÓA NGOẠI trên nhiều cột:
    ALTER TABLE Orders
    ADD CONSTRAINT FK_PersonOrder
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

- Xóa ràng buộc FOREIGN KEY:
+) MySQL;
    ALTER TABLE Orders
    DROP FOREIGN KEY FK_PersonOrder;

+) SQL Server:
    ALTER TABLE Orders
    DROP CONSTRAINT FK_PersonOrder;

***CHECK Constraint***
- Ràng buộc CHECK được sử dụng để giới hạn phạm vi giá trị có thể được đặt trong một cột.

- Nếu bạn xác định ràng buộc CHECK trên một cột, nó sẽ chỉ cho phép một số giá trị nhất định cho cột này.

- Nếu bạn xác định ràng buộc CHECK trên một bảng, nó có thể giới hạn các giá trị trong một số cột dựa trên các giá trị trong các cột khác trong hàng.

- Trong CREATE TABLE;
+) mySQL:
    CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
    );

+) SQL Server:
     CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int CHECK (Age>=18)
    );

+) CHECK trên nhiều cột:
     CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
    );

- Trong ALTER TABLE:
+) CHECK trên 1 cột:
    ALTER TABLE Persons
    ADD CHECK (Age>=18);

+) CHECK trên nhiều cột:
    ALTER TABLE Persons
    ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');

- Xóa ràng buộc CHECK:
+) mySQL:
      ALTER TABLE Persons
      DROP CHECK CHK_PersonAge;

+) SQL Server;
      ALTER TABLE Persons
      DROP CONSTRAINT CHK_PersonAge;


***DEFAULT Constraint***
- Ràng buộc DEFAULT được sử dụng để đặt giá trị mặc định cho một cột.

- Giá trị mặc định sẽ được thêm vào tất cả các bản ghi mới, nếu không có giá trị nào khác được chỉ định.

- Trong CREATE TABLE:
     CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
    );

- Ràng buộc DEFAULT cũng có thể được sử dụng để chèn các giá trị hệ thống, bằng cách sử dụng các hàm như GETDATE():
    CREATE TABLE Orders (
    ID int NOT NULL,
    OrderNumber int NOT NULL,
    OrderDate date DEFAULT GETDATE()
    );

- Trong ALTER TABLE:
+) mySQL:
      ALTER TABLE Persons
      ALTER City SET DEFAULT 'Sandnes';

+) SQL Server:
     ALTER TABLE Persons
     ADD CONSTRAINT df_City
     DEFAULT 'Sandnes' FOR City;

- Xóa ràng buộc DEFAULT:

+) mySQL:
     ALTER TABLE Persons
     ALTER City DROP DEFAULT;

+) SQL Server:
    ALTER TABLE Persons
    ALTER COLUMN City DROP DEFAULT;
     